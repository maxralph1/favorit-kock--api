openapi: 3.0.3
info:
  title: Laravel
  description: 'This is the Documentation to the Favorit-Kock API. <br /><br /> Hier ist die Dokumentation f√ºr Favorit-Kock-API.'
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/super-admin/categories:
    get:
      summary: 'GET Categories'
      operationId: gETCategories
      description: 'Returns paginated list of categories.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Category'
      operationId: pOSTCategory
      description: 'Creates a new Category record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message":"The title field is required.","errors":{"title":["The title field is required."]}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: eunzniawkgho
                description:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Enim ab laboriosam aperiam rerum distinctio et.'
              required:
                - title
                - description
  '/api/v1/super-admin/categories/{id}':
    get:
      summary: 'GET Category'
      operationId: gETCategory
      description: 'Returns a Category record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Category'
      operationId: pUTCategory
      description: 'Updates Category record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: zhkfcvo
                description:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Autem hic sed et sint vel qui.'
    delete:
      summary: 'DELETE Category'
      operationId: dELETECategory
      description: 'Deletes Category record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 01h3hkgycyk98aqfs483p8evcy
        required: true
        schema:
          type: string
  /api/v1/super-admin/deliveries:
    get:
      summary: 'GET Deliveries'
      operationId: gETDeliveries
      description: 'Returns paginated list of deliveries.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Delivery'
      operationId: pOSTDelivery
      description: 'Creates a new Delivery record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message":"The order_id field is required.","errors":{"order_id":["The order_id field is required."]}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: string
                  description: ''
                  example: maiores
                user_id:
                  type: string
                  description: ''
                  example: est
                delivered:
                  type: boolean
                  description: ''
                  example: false
                time_delivered:
                  type: string
                  description: ''
                  example: null
              required:
                - order_id
                - user_id
  '/api/v1/super-admin/deliveries/{id}':
    get:
      summary: 'GET Delivery'
      operationId: gETDelivery
      description: 'Returns a Delivery record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Delivery'
      operationId: pUTDelivery
      description: 'Updates Delivery record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: string
                  description: ''
                  example: null
                user_id:
                  type: string
                  description: ''
                  example: null
                delivered:
                  type: boolean
                  description: ''
                  example: false
                time_delivered:
                  type: string
                  description: ''
                  example: null
    delete:
      summary: 'DELETE Delivery'
      operationId: dELETEDelivery
      description: 'Deletes Delivery record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the delivery.'
        example: 01h3hkgz1aajbz5r5t77x6rny4
        required: true
        schema:
          type: string
  /api/v1/super-admin/meals:
    get:
      summary: 'GET Meals'
      operationId: gETMeals
      description: 'Returns paginated list of meals.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Meal'
      operationId: pOSTMeal
      description: 'Creates a new Meal record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message":"The title field is required.","errors":{"title":["The title field is required."]}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  description: ''
                  example: velit
                title:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: cywmhq
                description:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Dolore reiciendis sed corrupti sed debitis.'
                price:
                  type: number
                  description: ''
                  example: 7.165823361
                active:
                  type: boolean
                  description: ''
                  example: true
              required:
                - category_id
                - title
                - description
                - price
  '/api/v1/super-admin/meals/{id}':
    get:
      summary: 'GET Meal'
      operationId: gETMeal
      description: 'Returns a Meal record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Meal'
      operationId: pUTMeal
      description: 'Updates Meal record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  description: ''
                  example: null
                title:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: qt
                description:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Doloremque officiis aut eos eum veniam corrupti inventore.'
                price:
                  type: number
                  description: ''
                  example: 12503400.379
                active:
                  type: boolean
                  description: ''
                  example: false
    delete:
      summary: 'DELETE Meal'
      operationId: dELETEMeal
      description: 'Deletes Meal record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal.'
        example: 01h3hkgyhwvmvf4abd5hpj9p3x
        required: true
        schema:
          type: string
  /api/v1/super-admin/meal-images:
    get:
      summary: 'GET Meal Images'
      operationId: gETMealImages
      description: 'Returns paginated list of meal images.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","meal":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}},"default":1}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Meal Images'
      operationId: pOSTMealImages
      description: 'Creates a new Meal Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message":"The title field is required.","errors":{"title":["The title field is required."]}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: ducimus
                image_url:
                  type: string
                  description: ''
                  example: dolorem
                default:
                  type: boolean
                  description: ''
                  example: true
              required:
                - meal_id
                - image_url
  '/api/v1/super-admin/meal-images/{id}':
    get:
      summary: 'GET Meal Image'
      operationId: gETMealImage
      description: 'Returns a Meal Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Meal Image'
      operationId: pUTMealImage
      description: 'Updates Meal Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: null
                image_url:
                  type: string
                  description: ''
                  example: null
                default:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE Meal Image'
      operationId: dELETEMealImage
      description: 'Deletes Meal Image record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal image.'
        example: 01h3hkgynf5ce39m90b3h33vr5
        required: true
        schema:
          type: string
  /api/v1/super-admin/meal-inventories:
    get:
      summary: 'GET Meal Inventories'
      operationId: gETMealInventories
      description: 'Returns paginated list of meal inventories.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Meal Inventory'
      operationId: pOSTMealInventory
      description: 'Creates a new Meal Inventory record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: cum
                plates_prepared:
                  type: number
                  description: ''
                  example: 283281689.16943
                available:
                  type: boolean
                  description: ''
                  example: false
              required:
                - meal_id
                - plates_prepared
  '/api/v1/super-admin/meal-inventories/{id}':
    get:
      summary: 'GET Meal Inventory'
      operationId: gETMealInventory
      description: 'Returns a Meal Inventory record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Meal Inventory'
      operationId: pUTMealInventory
      description: 'Updates Meal Inventory record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: null
                plates_prepared:
                  type: number
                  description: ''
                  example: 860092.0
                available:
                  type: boolean
                  description: ''
                  example: false
    delete:
      summary: 'DELETE Meal Inventory'
      operationId: dELETEMealInventory
      description: 'Deletes Meal Inventory record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal inventory.'
        example: 01h3hkgyqn5d0fsm19nsyg2gxy
        required: true
        schema:
          type: string
  /api/v1/super-admin/orders:
    get:
      summary: 'GET Orders'
      operationId: gETOrders
      description: 'Returns paginated list of orders.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Order'
      operationId: pOSTOrder
      description: 'Creates a new Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: modi
                order_annuled:
                  type: boolean
                  description: ''
                  example: false
                delivered:
                  type: boolean
                  description: ''
                  example: true
                total_amount:
                  type: number
                  description: ''
                  example: 7729.706783228
                paid:
                  type: boolean
                  description: ''
                  example: true
              required:
                - user_id
  '/api/v1/super-admin/orders/{id}':
    get:
      summary: 'GET Order'
      operationId: gETOrder
      description: 'Returns an Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Order'
      operationId: pUTOrder
      description: 'Updates Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                order_annuled:
                  type: boolean
                  description: ''
                  example: false
                delivered:
                  type: boolean
                  description: ''
                  example: false
                total_amount:
                  type: number
                  description: ''
                  example: 4240075.0
                paid:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE Order'
      operationId: dELETEOrder
      description: 'Deletes Order record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order.'
        example: 01h3hkgysrj71pqm6dwfve5ay0
        required: true
        schema:
          type: string
  /api/v1/super-admin/order-items:
    get:
      summary: 'GET Order Items'
      operationId: gETOrderItems
      description: 'Returns paginated list of order items.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Order Item'
      operationId: pOSTOrderItem
      description: 'Creates a new Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: aut
                order_id:
                  type: string
                  description: ''
                  example: ut
                user_id:
                  type: string
                  description: ''
                  example: qui
                amount_due:
                  type: number
                  description: ''
                  example: 1429877.51
                quantity_ordered:
                  type: number
                  description: ''
                  example: 7247378.551712
              required:
                - meal_id
                - order_id
                - user_id
                - amount_due
                - quantity_ordered
  '/api/v1/super-admin/order-items/{id}':
    get:
      summary: 'GET Order Item'
      operationId: gETOrderItem
      description: 'Returns an Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Order Item'
      operationId: pUTOrderItem
      description: 'Updates Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: null
                order_id:
                  type: string
                  description: ''
                  example: null
                user_id:
                  type: string
                  description: ''
                  example: null
                amount_due:
                  type: number
                  description: ''
                  example: 1.0
                quantity_ordered:
                  type: number
                  description: ''
                  example: 736052.0
    delete:
      summary: 'DELETE Order Item'
      operationId: dELETEOrderItem
      description: 'Deletes Order Item record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order item.'
        example: 01h3hkgyygdrnkttkwkbh5sa1t
        required: true
        schema:
          type: string
  /api/v1/super-admin/users:
    get:
      summary: 'GET Users'
      operationId: gETUsers
      description: 'Returns paginated list of users.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","username":"testuser1","name":"Test User","email":"test@testuser.com","user_image":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"},"user_addresses":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST User'
      operationId: pOSTUser
      description: 'Creates a new User record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","username":"testuser1","name":"Test User","email":"test@testuser.com","user_image":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"},"user_addresses":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}}, ...}'
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message":"The name field is required.","errors":{"name":["The name field is required."]}, ...}'
      tags:
        - 'Admin endpoints'
  '/api/v1/super-admin/users/{id}':
    get:
      summary: 'GET User'
      operationId: gETUser
      description: 'Returns a User record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","username":"testuser1","name":"Test User","email":"test@testuser.com","user_image":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"},"user_addresses":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT User'
      operationId: pUTUser
      description: 'Updates User record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","username":"testuser1","name":"Test User","email":"test@testuser.com","user_image":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"},"user_addresses":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}}, ...}'
      tags:
        - 'Admin endpoints'
    delete:
      summary: 'DELETE User'
      operationId: dELETEUser
      description: 'Deletes User record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 01h3hkgxrwda7ryextav733edm
        required: true
        schema:
          type: string
  /api/v1/super-admin/user-addresses:
    get:
      summary: 'GET User Addresses'
      operationId: gETUserAddresses
      description: 'Returns paginated list of user addresses.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST User Address'
      operationId: pOSTUserAddress
      description: 'Creates a new User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: alias
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: sqdarbvaplgiboxrarmgzlj
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: huuilkutdphgqzplebjft
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: zywxwpnjyndfihvngsxddy
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: hqxjqrgtoeljpxjekysefym
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: qktptpx
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ejnniiblihlrt
                default:
                  type: boolean
                  description: ''
                  example: false
              required:
                - user_id
                - house_number
                - street
                - city
                - post_code
                - state
                - landmark
  '/api/v1/super-admin/user-addresses/{id}':
    get:
      summary: 'GET User Address'
      operationId: gETUserAddress
      description: 'Returns an User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT User Address'
      operationId: pUTUserAddress
      description: 'Updates User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: ldxcjzeh
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: qebytqvwzmrijmxjx
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: hhbol
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: kvijvsgkaryxfwzjgtyvwn
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: zztfpokbykfpruulhc
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: octovgmhgtleurqx
                default:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE User Address'
      operationId: dELETEUserAddress
      description: 'Deletes User Address record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user address.'
        example: 01h3hkgy9ag250nwcyjtvd6mtr
        required: true
        schema:
          type: string
  /api/v1/super-admin/user-images:
    get:
      summary: 'GET User Images'
      operationId: gETUserImages
      description: 'Returns paginated list of user images.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST User Image'
      operationId: pOSTUserImage
      description: 'Creates a new User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: aut
                image_url:
                  type: string
                  description: ''
                  example: alias
                default:
                  type: boolean
                  description: ''
                  example: true
              required:
                - user_id
                - image_url
  '/api/v1/super-admin/user-images/{id}':
    get:
      summary: 'GET User Image'
      operationId: gETUserImage
      description: 'Returns a User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT User Image'
      operationId: pUTUserImage
      description: 'Updates User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                image_url:
                  type: string
                  description: ''
                  example: null
                default:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE User Image'
      operationId: dELETEUserImage
      description: 'Deletes User Image record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user image.'
        example: 01h3hkgybezjhm8hcxrgn7z48v
        required: true
        schema:
          type: string
  /api/v1/admin/categories:
    get:
      summary: 'GET Categories'
      operationId: gETCategories
      description: 'Returns paginated list of categories.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
      tags:
        - 'Admin endpoints'
  '/api/v1/admin/categories/{id}':
    get:
      summary: 'GET Category'
      operationId: gETCategory
      description: 'Returns a Category record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 01h3hkgycyk98aqfs483p8evcy
        required: true
        schema:
          type: string
  /api/v1/admin/deliveries:
    get:
      summary: 'GET Deliveries'
      operationId: gETDeliveries
      description: 'Returns paginated list of deliveries.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Delivery'
      operationId: pOSTDelivery
      description: 'Creates a new Delivery record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message":"The order_id field is required.","errors":{"order_id":["The order_id field is required."]}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: string
                  description: ''
                  example: sit
                user_id:
                  type: string
                  description: ''
                  example: aut
                delivered:
                  type: boolean
                  description: ''
                  example: true
                time_delivered:
                  type: string
                  description: ''
                  example: null
              required:
                - order_id
                - user_id
  '/api/v1/admin/deliveries/{id}':
    get:
      summary: 'GET Delivery'
      operationId: gETDelivery
      description: 'Returns a Delivery record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Delivery'
      operationId: pUTDelivery
      description: 'Updates Delivery record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: string
                  description: ''
                  example: null
                user_id:
                  type: string
                  description: ''
                  example: null
                delivered:
                  type: boolean
                  description: ''
                  example: false
                time_delivered:
                  type: string
                  description: ''
                  example: null
    delete:
      summary: 'DELETE Delivery'
      operationId: dELETEDelivery
      description: 'Deletes Delivery record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the delivery.'
        example: 01h3hkgz1aajbz5r5t77x6rny4
        required: true
        schema:
          type: string
  /api/v1/admin/meals:
    get:
      summary: 'GET Meals'
      operationId: gETMeals
      description: 'Returns paginated list of meals.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
      tags:
        - 'Admin endpoints'
  '/api/v1/admin/meals/{id}':
    get:
      summary: 'GET Meal'
      operationId: gETMeal
      description: 'Returns a Meal record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal.'
        example: 01h3hkgyhwvmvf4abd5hpj9p3x
        required: true
        schema:
          type: string
  /api/v1/admin/meal-images:
    get:
      summary: 'GET Meal Images'
      operationId: gETMealImages
      description: 'Returns paginated list of meal images.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","meal":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}},"default":1}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Meal Images'
      operationId: pOSTMealImages
      description: 'Creates a new Meal Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message":"The title field is required.","errors":{"title":["The title field is required."]}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: qui
                image_url:
                  type: string
                  description: ''
                  example: incidunt
                default:
                  type: boolean
                  description: ''
                  example: true
              required:
                - meal_id
                - image_url
  '/api/v1/admin/meal-images/{id}':
    get:
      summary: 'GET Meal Image'
      operationId: gETMealImage
      description: 'Returns a Meal Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Meal Image'
      operationId: pUTMealImage
      description: 'Updates Meal Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: null
                image_url:
                  type: string
                  description: ''
                  example: null
                default:
                  type: boolean
                  description: ''
                  example: false
    delete:
      summary: 'DELETE Meal Image'
      operationId: dELETEMealImage
      description: 'Deletes Meal Image record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal image.'
        example: 01h3hkgynf5ce39m90b3h33vr5
        required: true
        schema:
          type: string
  /api/v1/admin/meal-inventories:
    get:
      summary: 'GET Meal Inventories'
      operationId: gETMealInventories
      description: 'Returns paginated list of meal inventories.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Meal Inventory'
      operationId: pOSTMealInventory
      description: 'Creates a new Meal Inventory record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: quidem
                plates_prepared:
                  type: number
                  description: ''
                  example: 4.01225
                available:
                  type: boolean
                  description: ''
                  example: false
              required:
                - meal_id
                - plates_prepared
  '/api/v1/admin/meal-inventories/{id}':
    get:
      summary: 'GET Meal Inventory'
      operationId: gETMealInventory
      description: 'Returns a Meal Inventory record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Meal Inventory'
      operationId: pUTMealInventory
      description: 'Updates Meal Inventory record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","plates_prepared":64,"active":null}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: null
                plates_prepared:
                  type: number
                  description: ''
                  example: 470883.7
                available:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE Meal Inventory'
      operationId: dELETEMealInventory
      description: 'Deletes Meal Inventory record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal inventory.'
        example: 01h3hkgyqn5d0fsm19nsyg2gxy
        required: true
        schema:
          type: string
  /api/v1/admin/orders:
    get:
      summary: 'GET Orders'
      operationId: gETOrders
      description: 'Returns paginated list of orders.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Order'
      operationId: pOSTOrder
      description: 'Creates a new Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: quidem
                order_annuled:
                  type: boolean
                  description: ''
                  example: false
                delivered:
                  type: boolean
                  description: ''
                  example: false
                total_amount:
                  type: number
                  description: ''
                  example: 349.2
                paid:
                  type: boolean
                  description: ''
                  example: false
              required:
                - user_id
  '/api/v1/admin/orders/{id}':
    get:
      summary: 'GET Order'
      operationId: gETOrder
      description: 'Returns an Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT Order'
      operationId: pUTOrder
      description: 'Updates Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                order_annuled:
                  type: boolean
                  description: ''
                  example: true
                delivered:
                  type: boolean
                  description: ''
                  example: false
                total_amount:
                  type: number
                  description: ''
                  example: 0.0
                paid:
                  type: boolean
                  description: ''
                  example: false
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order.'
        example: 01h3hkgysrj71pqm6dwfve5ay0
        required: true
        schema:
          type: string
  /api/v1/admin/order-items:
    get:
      summary: 'GET Order Items'
      operationId: gETOrderItems
      description: 'Returns paginated list of order items.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST Order Item'
      operationId: pOSTOrderItem
      description: 'Creates a new Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: et
                order_id:
                  type: string
                  description: ''
                  example: optio
                user_id:
                  type: string
                  description: ''
                  example: quas
                amount_due:
                  type: number
                  description: ''
                  example: 0.0
                quantity_ordered:
                  type: number
                  description: ''
                  example: 1.918230803
              required:
                - meal_id
                - order_id
                - user_id
                - amount_due
                - quantity_ordered
  '/api/v1/admin/order-items/{id}':
    get:
      summary: 'GET Order Item'
      operationId: gETOrderItem
      description: 'Returns an Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order item.'
        example: 01h3hkgyygdrnkttkwkbh5sa1t
        required: true
        schema:
          type: string
  /api/v1/admin/user-addresses:
    get:
      summary: 'GET User Addresses'
      operationId: gETUserAddresses
      description: 'Returns paginated list of user addresses.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST User Address'
      operationId: pOSTUserAddress
      description: 'Creates a new User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: modi
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: rqwyepuhnbbizg
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: pqmbzhnttqilugw
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: vzxgnoilhsltpizbilg
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: guddrmmwvc
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: ohlpymik
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ltixerkxvxc
                default:
                  type: boolean
                  description: ''
                  example: false
              required:
                - user_id
                - house_number
                - street
                - city
                - post_code
                - state
                - landmark
  '/api/v1/admin/user-addresses/{id}':
    get:
      summary: 'GET User Address'
      operationId: gETUserAddress
      description: 'Returns an User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT User Address'
      operationId: pUTUserAddress
      description: 'Updates User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: djgzanymw
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: svpriaau
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: oggn
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: xhzabczyd
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: mhvhrhxwij
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vstbhcvqiltcuhzuahp
                default:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE User Address'
      operationId: dELETEUserAddress
      description: 'Deletes User Address record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user address.'
        example: 01h3hkgy9ag250nwcyjtvd6mtr
        required: true
        schema:
          type: string
  /api/v1/admin/user-images:
    get:
      summary: 'GET User Images'
      operationId: gETUserImages
      description: 'Returns paginated list of user images.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
    post:
      summary: 'POST User Image'
      operationId: pOSTUserImage
      description: 'Creates a new User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: facere
                image_url:
                  type: string
                  description: ''
                  example: praesentium
                default:
                  type: boolean
                  description: ''
                  example: true
              required:
                - user_id
                - image_url
  '/api/v1/admin/user-images/{id}':
    get:
      summary: 'GET User Image'
      operationId: gETUserImage
      description: 'Returns a User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    put:
      summary: 'PUT User Image'
      operationId: pUTUserImage
      description: 'Updates User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Admin endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                image_url:
                  type: string
                  description: ''
                  example: null
                default:
                  type: boolean
                  description: ''
                  example: false
    delete:
      summary: 'DELETE User Image'
      operationId: dELETEUserImage
      description: 'Deletes User Image record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user image.'
        example: 01h3hkgybezjhm8hcxrgn7z48v
        required: true
        schema:
          type: string
  /api/v1/user/meal-images:
    get:
      summary: 'GET Meal Images'
      operationId: gETMealImages
      description: 'Returns paginated list of meal images.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","meal":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}},"default":1}, ...}'
      tags:
        - 'Admin endpoints'
  '/api/v1/user/meal-images/{id}':
    get:
      summary: 'GET Meal Image'
      operationId: gETMealImage
      description: 'Returns a Meal Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{"id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Admin endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal image.'
        example: 01h3hkgynf5ce39m90b3h33vr5
        required: true
        schema:
          type: string
  /api/v1/register:
    post:
      summary: 'POST Register'
      operationId: pOSTRegister
      description: 'Register with an existing user.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  access_token: 1|HvglYzIrLURVGx6Xe41HKj1CrNsxRxe4pLA2oISo
                  name: 'John Snow'
                  role: 4
                properties:
                  access_token:
                    type: string
                    example: 1|HvglYzIrLURVGx6Xe41HKj1CrNsxRxe4pLA2oISo
                  name:
                    type: string
                    example: 'John Snow'
                  role:
                    type: integer
                    example: 4
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: string
                    example: 'The provided credentials are incorrect.'
      tags:
        - 'Auth endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: sxjqujyvjf
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: gokudik
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: beer.paris@example.com
                password:
                  type: string
                  description: ''
                  example: dolorum
              required:
                - username
                - name
                - email
                - password
      security: []
  /api/v1/login:
    post:
      summary: 'POST Login'
      operationId: pOSTLogin
      description: 'Login with an existing user.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  access_token: 1|HvglYzIrLURVGx6Xe41HKj1CrNsxRxe4pLA2oISo
                  name: 'John Snow'
                  role: 4
                properties:
                  access_token:
                    type: string
                    example: 1|HvglYzIrLURVGx6Xe41HKj1CrNsxRxe4pLA2oISo
                  name:
                    type: string
                    example: 'John Snow'
                  role:
                    type: integer
                    example: 4
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: string
                    example: 'The provided credentials are incorrect.'
      tags:
        - 'Auth endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Must contain only letters and numbers.'
                  example: 7n6xgt4
                password:
                  type: string
                  description: ''
                  example: ratione
              required:
                - username
                - password
      security: []
  /api/v1/password-reset:
    put:
      summary: 'PUT Reset Password'
      operationId: pUTResetPassword
      description: 'Reset Password of an existing user.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: 'Your password has been updated.'
                properties:
                  success:
                    type: string
                    example: 'Your password has been updated.'
      tags:
        - 'Auth endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: ''
                  example: quos
                password:
                  type: string
                  description: ''
                  example: minima
              required:
                - current_password
                - password
  /api/v1/logout:
    post:
      summary: 'POST Logout'
      operationId: pOSTLogout
      description: 'Logout authenticated user.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Auth endpoints'
  /api/v1/categories:
    get:
      summary: 'GET Categories'
      operationId: gETCategories
      description: 'Returns paginated list of categories.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
      tags:
        - 'Public endpoints'
      security: []
  '/api/v1/categories/{id}':
    get:
      summary: 'GET Category'
      operationId: gETCategory
      description: 'Returns a Category record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Public endpoints'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 01h3hkgycyk98aqfs483p8evcy
        required: true
        schema:
          type: string
  /api/v1/meals:
    get:
      summary: 'GET Meals'
      operationId: gETMeals
      description: 'Returns paginated list of meals.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
      tags:
        - 'Public endpoints'
      security: []
  '/api/v1/meals/{id}':
    get:
      summary: 'GET Meal'
      operationId: gETMeal
      description: 'Returns a Meal record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Public endpoints'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal.'
        example: 01h3hkgyhwvmvf4abd5hpj9p3x
        required: true
        schema:
          type: string
  /api/v1/rider/deliveries:
    get:
      summary: 'GET Deliveries'
      operationId: gETDeliveries
      description: 'Returns paginated list of deliveries.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
      tags:
        - 'Rider endpoints'
  '/api/v1/rider/deliveries/{id}':
    get:
      summary: 'GET Delivery'
      operationId: gETDelivery
      description: 'Returns a Delivery record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","delivered":1,"time_delivered":"2007-03-15 16:07:24"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Rider endpoints'
    delete:
      summary: 'DELETE Delivery'
      operationId: dELETEDelivery
      description: 'Deletes Delivery record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Rider endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the delivery.'
        example: 01h3hkgz1aajbz5r5t77x6rny4
        required: true
        schema:
          type: string
  /api/v1/rider/user-addresses:
    get:
      summary: 'GET User Addresses'
      operationId: gETUserAddresses
      description: 'Returns paginated list of user addresses.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'Rider endpoints'
    post:
      summary: 'POST User Address'
      operationId: pOSTUserAddress
      description: 'Creates a new User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'Rider endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: illo
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: lfnejrtjmkiof
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: hefe
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: tohcjzathbkzaxlzrhwcsj
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: tqlsmwmoaxzdoacsdfotyy
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: nthud
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: kxfxntmysmwrosayt
                default:
                  type: boolean
                  description: ''
                  example: false
              required:
                - user_id
                - house_number
                - street
                - city
                - post_code
                - state
                - landmark
  '/api/v1/rider/user-addresses/{id}':
    get:
      summary: 'GET User Address'
      operationId: gETUserAddress
      description: 'Returns an User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Rider endpoints'
    put:
      summary: 'PUT User Address'
      operationId: pUTUserAddress
      description: 'Updates User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'Rider endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: kldmfgt
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: k
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: qijfnvwfuiyqkotsh
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: jteircguglczcabvwioxeho
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: klxkzaifxizjnkqsmyd
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: nktrav
                default:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE User Address'
      operationId: dELETEUserAddress
      description: 'Deletes User Address record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Rider endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user address.'
        example: 01h3hkgy9ag250nwcyjtvd6mtr
        required: true
        schema:
          type: string
  /api/v1/rider/user-images:
    post:
      summary: 'POST User Image'
      operationId: pOSTUserImage
      description: 'Creates a new User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Rider endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: et
                image_url:
                  type: string
                  description: ''
                  example: possimus
                default:
                  type: boolean
                  description: ''
                  example: true
              required:
                - user_id
                - image_url
  '/api/v1/rider/user-images/{id}':
    get:
      summary: 'GET User Image'
      operationId: gETUserImage
      description: 'Returns a User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'Rider endpoints'
    put:
      summary: 'PUT User Image'
      operationId: pUTUserImage
      description: 'Updates User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'Rider endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                image_url:
                  type: string
                  description: ''
                  example: null
                default:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE User Image'
      operationId: dELETEUserImage
      description: 'Deletes User Image record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Rider endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user image.'
        example: 01h3hkgybezjhm8hcxrgn7z48v
        required: true
        schema:
          type: string
  /api/v1/user/categories:
    get:
      summary: 'GET Categories'
      operationId: gETCategories
      description: 'Returns paginated list of categories.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
      tags:
        - 'User endpoints'
  '/api/v1/user/categories/{id}':
    get:
      summary: 'GET Category'
      operationId: gETCategory
      description: 'Returns a Category record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First category","description":"This is the first category"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'User endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 01h3hkgycyk98aqfs483p8evcy
        required: true
        schema:
          type: string
  /api/v1/user/meals:
    get:
      summary: 'GET Meals'
      operationId: gETMeals
      description: 'Returns paginated list of meals.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
      tags:
        - 'User endpoints'
  '/api/v1/user/meals/{id}':
    get:
      summary: 'GET Meal'
      operationId: gETMeal
      description: 'Returns a Meal record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","title":"First meal","description":"This is the first meal","price":"20.00","active":1,"category":{''id":"","title":"First meal","description":"This is the first meal"}}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'User endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the meal.'
        example: 01h3hkgyhwvmvf4abd5hpj9p3x
        required: true
        schema:
          type: string
  /api/v1/user/orders:
    get:
      summary: 'GET Orders'
      operationId: gETOrders
      description: 'Returns paginated list of orders.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'User endpoints'
    post:
      summary: 'POST Order'
      operationId: pOSTOrder
      description: 'Creates a new Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: quidem
                order_annuled:
                  type: boolean
                  description: ''
                  example: false
                delivered:
                  type: boolean
                  description: ''
                  example: true
                total_amount:
                  type: number
                  description: ''
                  example: 402.341
                paid:
                  type: boolean
                  description: ''
                  example: true
              required:
                - user_id
  '/api/v1/user/orders/{id}':
    get:
      summary: 'GET Order'
      operationId: gETOrder
      description: 'Returns an Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'User endpoints'
    put:
      summary: 'PUT Order'
      operationId: pUTOrder
      description: 'Updates Order record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","order_annuled":0,"delivered":0,"total_amount":50,"paid":0,"delivered_by":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                order_annuled:
                  type: boolean
                  description: ''
                  example: false
                delivered:
                  type: boolean
                  description: ''
                  example: false
                total_amount:
                  type: number
                  description: ''
                  example: 60.72569318
                paid:
                  type: boolean
                  description: ''
                  example: false
    delete:
      summary: 'DELETE Order'
      operationId: dELETEOrder
      description: 'Deletes Order record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'User endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order.'
        example: 01h3hkgysrj71pqm6dwfve5ay0
        required: true
        schema:
          type: string
  /api/v1/user/order-items:
    get:
      summary: 'GET Order Items'
      operationId: gETOrderItems
      description: 'Returns paginated list of order items.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'User endpoints'
    post:
      summary: 'POST Order Item'
      operationId: pOSTOrderItem
      description: 'Creates a new Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: quaerat
                order_id:
                  type: string
                  description: ''
                  example: ut
                user_id:
                  type: string
                  description: ''
                  example: temporibus
                amount_due:
                  type: number
                  description: ''
                  example: 675.47
                quantity_ordered:
                  type: number
                  description: ''
                  example: 15.0
              required:
                - meal_id
                - order_id
                - user_id
                - amount_due
                - quantity_ordered
  '/api/v1/user/order-items/{id}':
    get:
      summary: 'GET Order Item'
      operationId: gETOrderItem
      description: 'Returns an Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'User endpoints'
    put:
      summary: 'PUT Order Item'
      operationId: pUTOrderItem
      description: 'Updates Order Item record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_id:
                  type: string
                  description: ''
                  example: null
                order_id:
                  type: string
                  description: ''
                  example: null
                user_id:
                  type: string
                  description: ''
                  example: null
                amount_due:
                  type: number
                  description: ''
                  example: 1129983.3820182
                quantity_ordered:
                  type: number
                  description: ''
                  example: 272942869.763
    delete:
      summary: 'DELETE Order Item'
      operationId: dELETEOrderItem
      description: 'Deletes Order Item record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'User endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order item.'
        example: 01h3hkgyygdrnkttkwkbh5sa1t
        required: true
        schema:
          type: string
  /api/v1/user/user-addresses:
    get:
      summary: 'GET User Addresses'
      operationId: gETUserAddresses
      description: 'Returns paginated list of user addresses.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'User endpoints'
    post:
      summary: 'POST User Address'
      operationId: pOSTUserAddress
      description: 'Creates a new User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: repellendus
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: arboyiolnrqdoezrmdsw
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: szdfjvgmkfx
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: wmondubiwiv
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: ekhxppeikjqyn
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: ei
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: gsj
                default:
                  type: boolean
                  description: ''
                  example: false
              required:
                - user_id
                - house_number
                - street
                - city
                - post_code
                - state
                - landmark
  '/api/v1/user/user-addresses/{id}':
    get:
      summary: 'GET User Address'
      operationId: gETUserAddress
      description: 'Returns an User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","house_number":0,"street":"Thomson Street","city":"New York","post_code":12345,"state":"New York STate","landmark":"On the mango tree","default":1}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'User endpoints'
    put:
      summary: 'PUT User Address'
      operationId: pUTUserAddress
      description: 'Updates User Address record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                house_number:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: vcqsj
                street:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: mroqusj
                city:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: vmjevpacefufgiqmmo
                post_code:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: hsacerepp
                state:
                  type: string
                  description: 'Must not be greater than 75 characters.'
                  example: cfblmsjjnjriwwfopooenn
                landmark:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: dgkxhossfdrpujqhvavcwtvil
                default:
                  type: boolean
                  description: ''
                  example: true
    delete:
      summary: 'DELETE User Address'
      operationId: dELETEUserAddress
      description: 'Deletes User Address record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'User endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user address.'
        example: 01h3hkgy9ag250nwcyjtvd6mtr
        required: true
        schema:
          type: string
  '/api/v1/user/user-addresses/{user_address_id}/make-default':
    patch:
      summary: 'PATCH User Address'
      operationId: pATCHUserAddress
      description: 'Makes User Address record default.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","meal_id":"01h3hkhxrh15atksjr11hrck0d","order_id":"01h3hkhxrh15atksjr11hrck0d","user_id":"01h3hkhxrh15atksjr11hrck0d","amount_due":55,"quantity_ordered":5}, ...}'
      tags:
        - 'User endpoints'
    parameters:
      -
        in: path
        name: user_address_id
        description: 'The ID of the user address.'
        example: 01h3hkgy9ag250nwcyjtvd6mtr
        required: true
        schema:
          type: string
  /api/v1/user/user-images:
    post:
      summary: 'POST User Image'
      operationId: pOSTUserImage
      description: 'Creates a new User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: illum
                image_url:
                  type: string
                  description: ''
                  example: porro
                default:
                  type: boolean
                  description: ''
                  example: true
              required:
                - user_id
                - image_url
  '/api/v1/user/user-images/{id}':
    get:
      summary: 'GET User Image'
      operationId: gETUserImage
      description: 'Returns a User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Record not found.'
                properties:
                  message:
                    type: string
                    example: 'Record not found.'
      tags:
        - 'User endpoints'
    put:
      summary: 'PUT User Image'
      operationId: pUTUserImage
      description: 'Updates User Image record.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"data":{"id":"01h3hkhxrh15atksjr11hrck0d","image_url":"https://via.placeholder.com/133x422.png/00dd55?tex...","user_id":"01h3hkhxrh15atksjr11hrck0d"}, ...}'
      tags:
        - 'User endpoints'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ''
                  example: null
                image_url:
                  type: string
                  description: ''
                  example: null
                default:
                  type: boolean
                  description: ''
                  example: false
    delete:
      summary: 'DELETE User Image'
      operationId: dELETEUserImage
      description: 'Deletes User Image record.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'User endpoints'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user image.'
        example: 01h3hkgybezjhm8hcxrgn7z48v
        required: true
        schema:
          type: string
tags:
  -
    name: 'Admin endpoints'
    description: ''
  -
    name: 'Auth endpoints'
    description: ''
  -
    name: 'Public endpoints'
    description: ''
  -
    name: 'Rider endpoints'
    description: ''
  -
    name: 'User endpoints'
    description: ''
